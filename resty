#!/usr/bin/env bash
# AUTHOR    Jeffrey Serio <hyperreal64@gmail.com>
# DATE      07 Jun 2021
# VERSION   0.0.2
#
# DESCRIPTION
# A script that interacts with the restic command to backup files and such to
# a rest-server. It is only meant to simplify certain restic tasks and does not
# support full restic functionality. If one needs full restic functionality, then use 
# restic :P
# It checks if the user is using a Wireguard VPN and sets the rest-server IP accordingly.
#
# CHANGELOG
# 2021-06-07 - Refactor IP address and Wireguard checking
#            - Add error check for $files_list_path
#
# 2021-05-22 - First version
#

#set -x
set -euo pipefail

# $files_list_path is a path to a directory containing lists of files
# for restic to backup for a given repository.
# User should define $rest_server_ip to be the ip of their rest-server
files_list_path="${HOME}/documents/backup_files"
rest_server_ip=""

if command -v wg >& /dev/null; then
  rest_server_ip=$(sudo wg | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" \
    | tail -n 1)
fi

rest_server_port="8000"
rest_server_uri="http://${rest_server_ip}:${rest_server_port}"
restic_repos=$(ssh "${USER}@${rest_server_ip}" ls /srv/restic)

function printUsage() {
  printf "Usage:\n\n"
  printf "\tresty -r <repo> -a backup|snapshots|ls|restore|diff <args...>\n\n"
  printf "\tBack up repository:\n"
  printf "\t  resty -r <repo> -a backup\n\n"
  printf "\tList snapshots of repository:\n"
  printf "\t  resty -r <repo> -a snapshots\n\n"
  printf "\tList files in snapshot of repository:\n"
  printf "\t  resty -r <repo> -a ls <snap_id>\n\n"
  printf "\tRestore files from snapshot of repository to path:\n"
  printf "\t  resty -r <repo> -a restore <snap_id> <path>\n\n"
  printf "\tDisplay diff between two snapshots in repository:\n"
  printf "\t  resty -r <repo> -a diff <snap_id0> <snap_id1>\n\n"
  printf "\tList repositories on rest-server:\n"
  printf "\t  resty -l\n\n"
  printf "\tPrint usage info:\n"
  printf "\t  resty -h\n\n"
}

# Check for restic command
if ! [ "$(command -v restic)" ]; then
  echo "Please install restic and ensure it is in \$PATH"
  echo ""
  exit 1
fi

declare repo=""
declare action=""
declare args=()
while getopts "r:a:lh" flag; do
  case "${flag}" in
    r) repo="${OPTARG}"
      ;;
    a) action="${OPTARG}"
       args+=("$@")
      ;;
    l) echo "${restic_repos}"
      ;;
    h) printUsage
      ;;
   \?) echo "Invalid option: Run resty -h for usage info" >&2
       exit 1
      ;;
  esac
done
shift $((OPTIND -1))

if [[ ! "${restic_repos[*]}" =~ ${repo} ]]; then
  echo "Repository $repo does not exist or is misspelled."
  echo ""
  exit 1
fi

case "${action}" in
  "backup")

    if ! [ -f "${files_list_path}/${repo}.txt" ]; then
      echo "${files_list_path}/${repo}.txt does not exist"
      exit 1
    fi

    restic -r "rest:${rest_server_uri}/$repo" backup \
      --files-from "${files_list_path}/${repo}.txt"
    ;;
  "snapshots")
    restic -r "rest:${rest_server_uri}/$repo" snapshots
    ;;
  "restore")
    restic -r "rest:${rest_server_uri}/$repo" restore "${args[4]}" \
      --target "${args[5]}"
    ;;
  "ls")
    restic -r "rest:${rest_server_uri}/$repo" ls "${args[4]}"
    ;;
  "diff")
    restic -r "rest:${rest_server_uri}/$repo" diff "${args[4]}" "${args[5]}"
    ;;
  \?)
    echo "Invalid action: Run resty -h to see available actions" >&2
    exit 1
    ;;
esac

